<?php

namespace SlackMessage\Providers;


use Composer\Config;
use GuzzleHttp\Client;
use Illuminate\Support\ServiceProvider;
use SlackMessage\Models\BaseFilter;
use SlackMessage\Models\BaseMessage;
use SlackMessage\Models\Sender;
use SlackMessage\Models\SlackFilterChannel;
use SlackMessage\Models\SlackFilterUser;

/**
 * Class SlackProvider
 * @package SlackMessage\Providers
 */
class SlackProvider extends ServiceProvider
{
    const CONFIG_PATH = '..\..\config\config.php';

    /**
     *
     */
    public function boot()
    {
        $this->publishes(
            [
                realpath(self::CONFIG_PATH) => config_path('slack-message.php')
            ],
            'config'
        );

    }

    /**
     *
     */
    public function register()
    {
        $this->mergeConfigFrom(self::CONFIG_PATH, 'slack-message');
        app()->when([
            BaseFilter::class,
            SlackFilterChannel::class,
            SlackFilterUser::class,
            BaseMessage::class
        ])->needs(Client::class)
            ->give(function() {
                // dd($this->app['config']);
                return new Client([
                    'base_uri' => config('slack-message.slack_api_url'),
                    'headers'   =>  [
                        'Authorization' =>  'Bearer '.config('slack-message.slack_bot_token'),
                        'Accept'        =>  'application/json',
                        'Content-type'  =>  'application/json',
                        'User-Agent'    =>  'PostmanRuntime/7.21.0'
                    ],
                    'verify'    =>  false
                ]);
            });
        parent::register(); // TODO: Change the autogenerated stub
    }

    public function provides()
    {
        // TODO: Change the autogenerated stub
    }


}
